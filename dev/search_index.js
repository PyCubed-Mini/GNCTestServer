var documenterSearchIndex = {"docs":
[{"location":"#GNCTestServer.jl","page":"Home","title":"GNCTestServer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Test server for the Guidance, Navigation, and Control system of the PyCubed-Mini Sattelite","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Satelite dynamics, with magnetorquers\nServer not included\nIntended for use with the Pycubed-Mini emulation driver\nSupport for this server has not yet been created","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [GNCTestServer]\nOrder   = [:function, :type]","category":"page"},{"location":"#GNCTestServer.L-Tuple{Any}","page":"Home","title":"GNCTestServer.L","text":"L(q) \n\n  Converts a scalar-first unit quaternion into the left-side matrix for \nquaternion multiplication, as described in \"Planning with Attiude\" (Jackson)\n\nArguments:\n - q:  A scalar-first unit quaternion                         |  [4,]\n\nReturns: \n - M:  Left-side matrix representing the given quaternion     |  [4, 4]\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.R-Tuple{Any}","page":"Home","title":"GNCTestServer.R","text":"R(q) \n\n  Converts a scalar-first unit quaternion into the right-side matrix for \nquaternion multiplication, as described in \"Planning with Attiude\" (Jackson)\n\nArguments:\n - q:  A scalar-first unit quaternion                         |  [4,]\n\nReturns: \n - M:  Right-side matrix representing the given quaternion     |  [4, 4]\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.accel_perturbations-Tuple{SatelliteDynamics.Epoch, Any, Any}","page":"Home","title":"GNCTestServer.accel_perturbations","text":"Generates the acceleration for a spacecraft in LEO. Accounts for a variety of factors,  including spherical harmonics, atmospheric drag, SRP, and thirdbody from sun and moon\n\nForwardDiff friendly (written by Kevin)\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.control_step-Tuple{NamedTuple{(:r, :v, :q, :ω), NTuple{4, Vector{Float64}}}, Parameters, Any, SatelliteDynamics.Epoch}","page":"Home","title":"GNCTestServer.control_step","text":"Updates the free parameters given the state and time,  then calls the control function to compute the control input.\n\nArguments:\n\nstate:   Current state of the system, as a State struct            |  State\nparams:  Free parameters of the system, as a Parameters struct     |  Parameters\ncontrol: Control function of state, parameters, and time           |  Function\nt:       Current time, as an Epoch struct                          |  Epoch\n\nReturns:\n\ncontrol: Control input of the Satellite                            |  Control\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.default_log_init-Tuple{Any}","page":"Home","title":"GNCTestServer.default_log_init","text":"Default function to initialize the log, only logs angular velocity and magnitude.\n\nArguments:\n\nstate:       Current state of the system, as a State struct            |  State\niterations:  Number of iterations the simulation is run                |  Scalar\n\nReturns:\n\nhist:        Initialized log of the simulation                         |  Matrix\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.default_log_step-Tuple{Any, Any}","page":"Home","title":"GNCTestServer.default_log_step","text":"Default function to update the log, only logs angular velocity and magnitude.\n\nArguments:\n\nhist:        Log of the simulation                                     |  Matrix\nstate:       Current state of the system, as a State struct            |  State\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.dynamics-Tuple{NamedTuple{(:r, :v, :q, :ω), NTuple{4, Vector{Float64}}}, Parameters, Control, SatelliteDynamics.Epoch}","page":"Home","title":"GNCTestServer.dynamics","text":"Returns the derivative of the state, given the current state, parameters, control input, and time.\n\nArguments:\n\nstate: the current state of the spacecraft                             | State\nparameters: the parameters of the spacecraft                           | Parameters\ncontrol: the control input to apply to the spacecraft                  | Control\nt: the current time                                                    | Epoch\n\nReturns:\n\nstate: the derivative of the state                                     | State\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.hat-Tuple{Any}","page":"Home","title":"GNCTestServer.hat","text":"hat(v)\n\nConverts a 3-element vector into a cross-product matrix.\n\nArguments:\n - v:  3-element vector                   |  [3,] \n\nReturns:\n - M:  A [3 × 3] skew-symmetric matrix    |  [3, 3]\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.initialize_orbit-Tuple{}","page":"Home","title":"GNCTestServer.initialize_orbit","text":"Initializes a random, viable orbit given a few different terms, usually  a position 'r' in Cartesian coordinates. Initial velocity may be specified, but  if specified it will not necessarily result in a stable orbit. \n\nThe initial starting position, velocity, semi-major axis, orientation, and angular  velocity may be either specified or determined randomly. \n\nArguments:\n\nr:  (Optional) Height above ground that the satellite will start its orbit at    |  Scalar \nv:  (Optional) Magnitude of initial velocity                                     |  Scalar \na:  (Optional) Semi-major axis                                                   |  Scalar \nq:  (Optional) Initial attitude, as a unit quaternion                            |  [4,]\nω:  (Optional) Initial angular velocity                                          |  [3,]\n\nReturns:\n\nx:  Initial state, as (r, v, q, ω)                                               |  State\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.integrate_state-Tuple{NamedTuple{(:r, :v, :q, :ω), NTuple{4, Vector{Float64}}}, Parameters, Control, SatelliteDynamics.Epoch, Float64}","page":"Home","title":"GNCTestServer.integrate_state","text":"Integrate the state forward by dt seconds, using the given control input.\n\nArguments\n\nstate: the current state of the spacecraft                             | State\nparameters: the parameters of the spacecraft                           | Parameters\ncontrol: the control input to apply to the spacecraft                  | Control\nt: the current time                                                    | Epoch\ndt: the time step to integrate forward by                              | Float64\n\nReturns\n\nstate: the state of the spacecraft after the integration               | State\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.qdot-Tuple{Any, Any}","page":"Home","title":"GNCTestServer.qdot","text":"qdot(q, ω)\n\nProvides the derivative of a quaternion, given the angular velocity \n\nArguments:\n - q:  Scalar-first unit quaternion                              |  [4,]\n - ω:  Angular velocity                                          |  [3,]\n\nReturns:\n - q̇:  Derivative of attitude, parameterized as a quaternion     |  [4,]\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.quaternionToMatrix-Tuple{Vector{Float64}}","page":"Home","title":"GNCTestServer.quaternionToMatrix","text":"quaternionToMatrix (q)     Arguments:      - q: Scalar-first unit quaternion                               | [4,]\n\nReturns:\n - Q: Rotation matrix representing the same rotation\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.rk4-NTuple{4, Any}","page":"Home","title":"GNCTestServer.rk4","text":"Rung-Kutta 4th order integrator\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.sim_step-Tuple{NamedTuple{(:r, :v, :q, :ω), NTuple{4, Vector{Float64}}}, Parameters, Control, SatelliteDynamics.Epoch, Float64}","page":"Home","title":"GNCTestServer.sim_step","text":"steps the simulation forward by one time step, dt. given the current state, free parameters, control function, and time.\n\nArguments:\n\nstate:   Current state of the system, as a State struct            |  State\nparams:  Free parameters of the system, as a Parameters struct     |  Parameters\ncontrol: Control input of the Satellite                            |  Control\nt:       Current time, as an Epoch struct                          |  Epoch\ndt:      Time step, in seconds                                     |  Scalar\n\nReturns:\n\nstate:   Updated state of the system, as a State struct            |  State\nt:       Updated time, as an Epoch struct                          |  Epoch\n\n\n\n\n\n","category":"method"},{"location":"#GNCTestServer.simulate-Tuple{Function}","page":"Home","title":"GNCTestServer.simulate","text":"Runs the simulation, given a control function. Optionally takes in functions to initialize and update the log.\n\nArguments:\n\ncontrol_fn:  Function to compute control input, given state, params, and time      |  Function\nlog_init:    (Optional) Function to initialize the log, given the number of steps  |  Function\nlog_step:    (Optional) Function to update the log, given the current state        |  Function\n\nReturns:\n\nhist:        Generated log of the simulation\n\n\n\n\n\n","category":"method"}]
}
